<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label3.Text" xml:space="preserve">
    <value>CHỨC NĂNG :(BUTTON)
    + THÊM: Ở đây bạn có thể thêm mới một nhân viên dưới quyền Admin
    + SỬA: Bạn có thể chỉnh sửa thông tin nhân viên 
    + XÓA: Dưới quyền của Admin bạn có thể xóa nhân viên khỏi hệ thống

</value>
  </data>
  <data name="label5.Text" xml:space="preserve">
    <value>CHỨC NĂNG :(BUTTON)
    + THÊM: Dưới quyền quản lý của nhân viên Bạn có thể thêm mới Bệnh nhân khám bệnh
    + SỬA: Bạn có thể chỉnh sửa thông tin Hồ sơ của bệnh nhân khi người khám bệnh yêu cầu sửa
    + XÓA: Dưới quyền của Nhân viên bạn có thể hủy bỏ hồ sơ của bệnh nhân khỏi hệ thống
    + LỌC: Bạn có thể lọc ra bệnh nhân thông qua (CMND) 
    + LÀM MỚI: Bạn có thể viết lại thông tin của bệnh nhân kế tiếp</value>
  </data>
  <data name="label7.Text" xml:space="preserve">
    <value>CHỨC NĂNG :(BUTTON)
    + THÊM: Dưới quyền quản lý của nhân viên Bạn có thể đăng ký khám bệnh cho bệnh nhân với bác sỹ phụ trách cho bệnh nhân đó
    + SỬA: Bạn có thể chỉnh sửa thông tin đăng ký khám bệnh cho bệnh nhân
    + XÓA: Dưới quyền của Nhân viên bạn có thể hủy bỏ đăng ký khám bệnh cho bệnh nhân (nếu sự yêu cầu này của bệnh nhân yêu cầu đến nhân viên
 </value>
  </data>
  <data name="label9.Text" xml:space="preserve">
    <value>CHỨC NĂNG :(BUTTON)
    + THÊM: dưới quyền của y tá phụ trách ghi chép lại sau khi bác sỹ khám bệnh ghi lại thông tin bệnh lý của bệnh nhân
    + SỬA: nếu như có sự sai sót về bệnh lý thì y tá có quyền chỉnh sửa lại
    + XÓA: Nếu như hồ sơ đăng ký sai sót thông tin thì y tá sẽ hủy khám bệnh cho bệnh nhân
    + LỌC: y tá sẽ lọc ra thông tin bệnh nhân 
    + LÀM MỚI: trong quá trình sai xót thì y tá sẽ viết lại bằng cách (làm mới) để ghi chép lại</value>
  </data>
  <data name="label11.Text" xml:space="preserve">
    <value>CHỨC NĂNG :(BUTTON)
    + THÊM: dưới quyền của y tá phụ trách ghi chép lại sau khi bác sỹ khám bệnh ghi lại thông tin bệnh lý của bệnh nhân
    + SỬA: nếu như có sự sai sót về bệnh lý thì y tá có quyền chỉnh sửa lại
    + XÓA: Nếu như hồ sơ đăng ký sai sót thông tin thì y tá sẽ hủy khám bệnh cho bệnh nhân
    + LỌC: y tá sẽ lọc ra thông tin bệnh nhân 
    + LÀM MỚI: trong quá trình sai xót thì y tá sẽ viết lại bằng cách (làm mới) để ghi chép lại</value>
  </data>
  <data name="label13.Text" xml:space="preserve">
    <value>CHỨC NĂNG :(BUTTON)
    + CẬP NHẬP LẠI DỮ LIỆU: nhân viên sẽ cập nhập lại thông tin của tất cả bệnh nhân 
    + XUẤT FILE : sau khi kiểm tra lại thông tin của bệnh nhân thì phần này nhân viên sẽ export file (excel) nhằm thống kê lại danh sách bệnh nhân
</value>
  </data>
</root>